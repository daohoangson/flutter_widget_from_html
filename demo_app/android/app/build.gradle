plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "dev.fwfh.demo_app"
    compileSdk = flutter.compileSdkVersion

    // TODO: remove hard-coded value when `flutter.ndkVersion` is sufficient
    // open $(dirname $(dirname $(which flutter)))/packages/flutter_tools
    ndkVersion = "26.1.10909125"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        applicationId = "dev.fwfh.demo_app"

        // TODO: remove hard-coded value when `flutter.minSdkVersion` is sufficient
        // open $(dirname $(dirname $(which flutter)))/packages/flutter_tools
        minSdk = 21

        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName

        // https://patrol.leancode.co/getting-started
        testInstrumentationRunner "pl.leancode.patrol.PatrolJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: "true"
    }

    signingConfigs {
        demo {
            storeFile file("../keystore")
            storePassword "storepass"
            keyAlias "alias"
            keyPassword "keypass"
        }
    }

    buildTypes {
        debug {
            signingConfig = signingConfigs.demo
        }
        release {
            signingConfig = signingConfigs.demo
        }
    }

    testOptions {
        // https://patrol.leancode.co/getting-started
        execution "ANDROIDX_TEST_ORCHESTRATOR"
    }
}

flutter {
    source = "../.."
}

dependencies {
    // https://patrol.leancode.co/getting-started
    androidTestUtil "androidx.test:orchestrator:1.5.0"
}
