name: Flutter
on:
  push:
    branches:
      - master
  pull_request:
    branches-ignore:
      - release/beta
      - release/master

jobs:
  unit_test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
      - name: Run flutter format
        run: flutter format --dry-run --set-exit-if-changed .
      - run: ./tool/test.sh --coverage
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: failures
          path: demo_app/test/failures/
      - uses: codecov/codecov-action@v2

  integration_test:
    name: Integration test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Flutter
        uses: subosito/flutter-action@v2

      - uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "11"
      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      - name: Run tests on Android
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./tool/integration.sh

      - name: Create iOS simulator
        run: |
          set -e

          _deviceType=$( xcrun simctl list devicetypes iphone -j | jq '.devicetypes[-1]' )
          _deviceTypeName=$( echo $_deviceType | jq .name -r )
          _deviceTypeId=$( echo $_deviceType | jq .identifier -r )
          _runTime=$( xcrun simctl list runtimes ios -j | jq '.runtimes[].identifier' -r | tail -n 1 )
          xcrun simctl create "$_deviceTypeName" "$_deviceTypeId" "$_runTime" | xargs xcrun simctl boot
      - name: Run tests on iOS
        run: ./tool/integration.sh
